<?php
/**
 * ObjectsDataObjects
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Object Storage API Documentaion
 *
 * A scalable, reliable, and cost effective Object Storage solution to support your application from liara-cloud
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@liara.ir
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ObjectsDataObjects Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ObjectsDataObjects implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Objects_data_objects';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_truncated' => 'bool',
        'contents' => '\OpenAPI\Client\Model\ObjectsDataObjectsContentsInner[]',
        'name' => 'string',
        'prefix' => 'string',
        'delimiter' => 'string',
        'max_keys' => 'float',
        'common_prefixes' => '\OpenAPI\Client\Model\ObjectsDataObjectsCommonPrefixesInner[]',
        'key_count' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'is_truncated' => null,
        'contents' => null,
        'name' => null,
        'prefix' => null,
        'delimiter' => null,
        'max_keys' => null,
        'common_prefixes' => null,
        'key_count' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'is_truncated' => false,
		'contents' => false,
		'name' => false,
		'prefix' => false,
		'delimiter' => false,
		'max_keys' => false,
		'common_prefixes' => false,
		'key_count' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_truncated' => 'IsTruncated',
        'contents' => 'Contents',
        'name' => 'Name',
        'prefix' => 'Prefix',
        'delimiter' => 'Delimiter',
        'max_keys' => 'MaxKeys',
        'common_prefixes' => 'CommonPrefixes',
        'key_count' => 'KeyCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_truncated' => 'setIsTruncated',
        'contents' => 'setContents',
        'name' => 'setName',
        'prefix' => 'setPrefix',
        'delimiter' => 'setDelimiter',
        'max_keys' => 'setMaxKeys',
        'common_prefixes' => 'setCommonPrefixes',
        'key_count' => 'setKeyCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_truncated' => 'getIsTruncated',
        'contents' => 'getContents',
        'name' => 'getName',
        'prefix' => 'getPrefix',
        'delimiter' => 'getDelimiter',
        'max_keys' => 'getMaxKeys',
        'common_prefixes' => 'getCommonPrefixes',
        'key_count' => 'getKeyCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('is_truncated', $data ?? [], null);
        $this->setIfExists('contents', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('prefix', $data ?? [], null);
        $this->setIfExists('delimiter', $data ?? [], null);
        $this->setIfExists('max_keys', $data ?? [], null);
        $this->setIfExists('common_prefixes', $data ?? [], null);
        $this->setIfExists('key_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_truncated
     *
     * @return bool|null
     */
    public function getIsTruncated()
    {
        return $this->container['is_truncated'];
    }

    /**
     * Sets is_truncated
     *
     * @param bool|null $is_truncated is_truncated
     *
     * @return self
     */
    public function setIsTruncated($is_truncated)
    {
        if (is_null($is_truncated)) {
            throw new \InvalidArgumentException('non-nullable is_truncated cannot be null');
        }
        $this->container['is_truncated'] = $is_truncated;

        return $this;
    }

    /**
     * Gets contents
     *
     * @return \OpenAPI\Client\Model\ObjectsDataObjectsContentsInner[]|null
     */
    public function getContents()
    {
        return $this->container['contents'];
    }

    /**
     * Sets contents
     *
     * @param \OpenAPI\Client\Model\ObjectsDataObjectsContentsInner[]|null $contents contents
     *
     * @return self
     */
    public function setContents($contents)
    {
        if (is_null($contents)) {
            throw new \InvalidArgumentException('non-nullable contents cannot be null');
        }
        $this->container['contents'] = $contents;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string|null
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string|null $prefix prefix
     *
     * @return self
     */
    public function setPrefix($prefix)
    {
        if (is_null($prefix)) {
            throw new \InvalidArgumentException('non-nullable prefix cannot be null');
        }
        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets delimiter
     *
     * @return string|null
     */
    public function getDelimiter()
    {
        return $this->container['delimiter'];
    }

    /**
     * Sets delimiter
     *
     * @param string|null $delimiter delimiter
     *
     * @return self
     */
    public function setDelimiter($delimiter)
    {
        if (is_null($delimiter)) {
            throw new \InvalidArgumentException('non-nullable delimiter cannot be null');
        }
        $this->container['delimiter'] = $delimiter;

        return $this;
    }

    /**
     * Gets max_keys
     *
     * @return float|null
     */
    public function getMaxKeys()
    {
        return $this->container['max_keys'];
    }

    /**
     * Sets max_keys
     *
     * @param float|null $max_keys max_keys
     *
     * @return self
     */
    public function setMaxKeys($max_keys)
    {
        if (is_null($max_keys)) {
            throw new \InvalidArgumentException('non-nullable max_keys cannot be null');
        }
        $this->container['max_keys'] = $max_keys;

        return $this;
    }

    /**
     * Gets common_prefixes
     *
     * @return \OpenAPI\Client\Model\ObjectsDataObjectsCommonPrefixesInner[]|null
     */
    public function getCommonPrefixes()
    {
        return $this->container['common_prefixes'];
    }

    /**
     * Sets common_prefixes
     *
     * @param \OpenAPI\Client\Model\ObjectsDataObjectsCommonPrefixesInner[]|null $common_prefixes common_prefixes
     *
     * @return self
     */
    public function setCommonPrefixes($common_prefixes)
    {
        if (is_null($common_prefixes)) {
            throw new \InvalidArgumentException('non-nullable common_prefixes cannot be null');
        }
        $this->container['common_prefixes'] = $common_prefixes;

        return $this;
    }

    /**
     * Gets key_count
     *
     * @return float|null
     */
    public function getKeyCount()
    {
        return $this->container['key_count'];
    }

    /**
     * Sets key_count
     *
     * @param float|null $key_count key_count
     *
     * @return self
     */
    public function setKeyCount($key_count)
    {
        if (is_null($key_count)) {
            throw new \InvalidArgumentException('non-nullable key_count cannot be null');
        }
        $this->container['key_count'] = $key_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


