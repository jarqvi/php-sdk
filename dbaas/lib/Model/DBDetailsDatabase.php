<?php
/**
 * DBDetailsDatabase
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DBaaS
 *
 * Manage your databases using our API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@liara.ir
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DBDetailsDatabase Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DBDetailsDatabase implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DB_details_database';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dbid' => 'string',
        'type' => 'string',
        'plan_id' => 'string',
        'status' => 'string',
        'scale' => 'int',
        'hostname' => 'string',
        'public_network' => 'bool',
        'version' => 'string',
        'volume_size' => 'int',
        'created_at' => 'string',
        'db_name' => 'string',
        'node' => '\OpenAPI\Client\Model\DBDetailsDatabaseNode',
        'port' => 'int',
        'root_password' => 'string',
        'internal_port' => 'int',
        'id' => 'string',
        'hourly_price' => 'float',
        'meta_data' => '\OpenAPI\Client\Model\DBDetailsDatabaseMetaData',
        'username' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dbid' => null,
        'type' => null,
        'plan_id' => null,
        'status' => null,
        'scale' => null,
        'hostname' => null,
        'public_network' => null,
        'version' => null,
        'volume_size' => null,
        'created_at' => null,
        'db_name' => null,
        'node' => null,
        'port' => null,
        'root_password' => null,
        'internal_port' => null,
        'id' => null,
        'hourly_price' => null,
        'meta_data' => null,
        'username' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'dbid' => false,
		'type' => false,
		'plan_id' => false,
		'status' => false,
		'scale' => false,
		'hostname' => false,
		'public_network' => false,
		'version' => false,
		'volume_size' => false,
		'created_at' => false,
		'db_name' => false,
		'node' => false,
		'port' => false,
		'root_password' => false,
		'internal_port' => false,
		'id' => false,
		'hourly_price' => false,
		'meta_data' => false,
		'username' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dbid' => 'DBId',
        'type' => 'type',
        'plan_id' => 'planID',
        'status' => 'status',
        'scale' => 'scale',
        'hostname' => 'hostname',
        'public_network' => 'publicNetwork',
        'version' => 'version',
        'volume_size' => 'volumeSize',
        'created_at' => 'created_at',
        'db_name' => 'dbName',
        'node' => 'node',
        'port' => 'port',
        'root_password' => 'root_password',
        'internal_port' => 'internalPort',
        'id' => 'id',
        'hourly_price' => 'hourlyPrice',
        'meta_data' => 'metaData',
        'username' => 'username'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dbid' => 'setDbid',
        'type' => 'setType',
        'plan_id' => 'setPlanId',
        'status' => 'setStatus',
        'scale' => 'setScale',
        'hostname' => 'setHostname',
        'public_network' => 'setPublicNetwork',
        'version' => 'setVersion',
        'volume_size' => 'setVolumeSize',
        'created_at' => 'setCreatedAt',
        'db_name' => 'setDbName',
        'node' => 'setNode',
        'port' => 'setPort',
        'root_password' => 'setRootPassword',
        'internal_port' => 'setInternalPort',
        'id' => 'setId',
        'hourly_price' => 'setHourlyPrice',
        'meta_data' => 'setMetaData',
        'username' => 'setUsername'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dbid' => 'getDbid',
        'type' => 'getType',
        'plan_id' => 'getPlanId',
        'status' => 'getStatus',
        'scale' => 'getScale',
        'hostname' => 'getHostname',
        'public_network' => 'getPublicNetwork',
        'version' => 'getVersion',
        'volume_size' => 'getVolumeSize',
        'created_at' => 'getCreatedAt',
        'db_name' => 'getDbName',
        'node' => 'getNode',
        'port' => 'getPort',
        'root_password' => 'getRootPassword',
        'internal_port' => 'getInternalPort',
        'id' => 'getId',
        'hourly_price' => 'getHourlyPrice',
        'meta_data' => 'getMetaData',
        'username' => 'getUsername'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('dbid', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('plan_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('scale', $data ?? [], null);
        $this->setIfExists('hostname', $data ?? [], null);
        $this->setIfExists('public_network', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('volume_size', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('db_name', $data ?? [], null);
        $this->setIfExists('node', $data ?? [], null);
        $this->setIfExists('port', $data ?? [], null);
        $this->setIfExists('root_password', $data ?? [], null);
        $this->setIfExists('internal_port', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('hourly_price', $data ?? [], null);
        $this->setIfExists('meta_data', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dbid
     *
     * @return string|null
     */
    public function getDbid()
    {
        return $this->container['dbid'];
    }

    /**
     * Sets dbid
     *
     * @param string|null $dbid The ID of the database
     *
     * @return self
     */
    public function setDbid($dbid)
    {
        if (is_null($dbid)) {
            throw new \InvalidArgumentException('non-nullable dbid cannot be null');
        }
        $this->container['dbid'] = $dbid;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of the database
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets plan_id
     *
     * @return string|null
     */
    public function getPlanId()
    {
        return $this->container['plan_id'];
    }

    /**
     * Sets plan_id
     *
     * @param string|null $plan_id The plan ID
     *
     * @return self
     */
    public function setPlanId($plan_id)
    {
        if (is_null($plan_id)) {
            throw new \InvalidArgumentException('non-nullable plan_id cannot be null');
        }
        $this->container['plan_id'] = $plan_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The status of the database
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets scale
     *
     * @return int|null
     */
    public function getScale()
    {
        return $this->container['scale'];
    }

    /**
     * Sets scale
     *
     * @param int|null $scale The scale of the database
     *
     * @return self
     */
    public function setScale($scale)
    {
        if (is_null($scale)) {
            throw new \InvalidArgumentException('non-nullable scale cannot be null');
        }
        $this->container['scale'] = $scale;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string|null
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string|null $hostname The hostname of the database
     *
     * @return self
     */
    public function setHostname($hostname)
    {
        if (is_null($hostname)) {
            throw new \InvalidArgumentException('non-nullable hostname cannot be null');
        }
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets public_network
     *
     * @return bool|null
     */
    public function getPublicNetwork()
    {
        return $this->container['public_network'];
    }

    /**
     * Sets public_network
     *
     * @param bool|null $public_network Indicates if the database is on a public network
     *
     * @return self
     */
    public function setPublicNetwork($public_network)
    {
        if (is_null($public_network)) {
            throw new \InvalidArgumentException('non-nullable public_network cannot be null');
        }
        $this->container['public_network'] = $public_network;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version The database version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets volume_size
     *
     * @return int|null
     */
    public function getVolumeSize()
    {
        return $this->container['volume_size'];
    }

    /**
     * Sets volume_size
     *
     * @param int|null $volume_size The size of the database volume
     *
     * @return self
     */
    public function setVolumeSize($volume_size)
    {
        if (is_null($volume_size)) {
            throw new \InvalidArgumentException('non-nullable volume_size cannot be null');
        }
        $this->container['volume_size'] = $volume_size;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at The creation timestamp of the database
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets db_name
     *
     * @return string|null
     */
    public function getDbName()
    {
        return $this->container['db_name'];
    }

    /**
     * Sets db_name
     *
     * @param string|null $db_name The name of db
     *
     * @return self
     */
    public function setDbName($db_name)
    {
        if (is_null($db_name)) {
            throw new \InvalidArgumentException('non-nullable db_name cannot be null');
        }
        $this->container['db_name'] = $db_name;

        return $this;
    }

    /**
     * Gets node
     *
     * @return \OpenAPI\Client\Model\DBDetailsDatabaseNode|null
     */
    public function getNode()
    {
        return $this->container['node'];
    }

    /**
     * Sets node
     *
     * @param \OpenAPI\Client\Model\DBDetailsDatabaseNode|null $node node
     *
     * @return self
     */
    public function setNode($node)
    {
        if (is_null($node)) {
            throw new \InvalidArgumentException('non-nullable node cannot be null');
        }
        $this->container['node'] = $node;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int|null $port The port number for the database connection
     *
     * @return self
     */
    public function setPort($port)
    {
        if (is_null($port)) {
            throw new \InvalidArgumentException('non-nullable port cannot be null');
        }
        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets root_password
     *
     * @return string|null
     */
    public function getRootPassword()
    {
        return $this->container['root_password'];
    }

    /**
     * Sets root_password
     *
     * @param string|null $root_password The root password for the database
     *
     * @return self
     */
    public function setRootPassword($root_password)
    {
        if (is_null($root_password)) {
            throw new \InvalidArgumentException('non-nullable root_password cannot be null');
        }
        $this->container['root_password'] = $root_password;

        return $this;
    }

    /**
     * Gets internal_port
     *
     * @return int|null
     */
    public function getInternalPort()
    {
        return $this->container['internal_port'];
    }

    /**
     * Sets internal_port
     *
     * @param int|null $internal_port The internal port of the database
     *
     * @return self
     */
    public function setInternalPort($internal_port)
    {
        if (is_null($internal_port)) {
            throw new \InvalidArgumentException('non-nullable internal_port cannot be null');
        }
        $this->container['internal_port'] = $internal_port;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique ID of the database
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets hourly_price
     *
     * @return float|null
     */
    public function getHourlyPrice()
    {
        return $this->container['hourly_price'];
    }

    /**
     * Sets hourly_price
     *
     * @param float|null $hourly_price The hourly price of the database
     *
     * @return self
     */
    public function setHourlyPrice($hourly_price)
    {
        if (is_null($hourly_price)) {
            throw new \InvalidArgumentException('non-nullable hourly_price cannot be null');
        }
        $this->container['hourly_price'] = $hourly_price;

        return $this;
    }

    /**
     * Gets meta_data
     *
     * @return \OpenAPI\Client\Model\DBDetailsDatabaseMetaData|null
     */
    public function getMetaData()
    {
        return $this->container['meta_data'];
    }

    /**
     * Sets meta_data
     *
     * @param \OpenAPI\Client\Model\DBDetailsDatabaseMetaData|null $meta_data meta_data
     *
     * @return self
     */
    public function setMetaData($meta_data)
    {
        if (is_null($meta_data)) {
            throw new \InvalidArgumentException('non-nullable meta_data cannot be null');
        }
        $this->container['meta_data'] = $meta_data;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username The username associated with the database
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


