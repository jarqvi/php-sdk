<?php
/**
 * MailServerResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Liara Mail API Documentaion
 *
 * A fully featured mail delivery platform for incoming & outgoing e-mail
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@liara.ir
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MailServerResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MailServerResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MailServerResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dns_setup' => '\OpenAPI\Client\Model\CheckDNSResponseDnsSetup',
        'domain' => 'string',
        'records_status' => 'string',
        'status' => 'string',
        'rate_limit_tier' => '\OpenAPI\Client\Model\MailServerResponseRateLimitTier',
        'created_at' => 'string',
        'id' => 'string',
        'smtp_server' => 'string',
        'smtp_port' => 'float',
        'root_part_of_domain' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dns_setup' => null,
        'domain' => null,
        'records_status' => null,
        'status' => null,
        'rate_limit_tier' => null,
        'created_at' => null,
        'id' => null,
        'smtp_server' => null,
        'smtp_port' => null,
        'root_part_of_domain' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'dns_setup' => false,
		'domain' => false,
		'records_status' => false,
		'status' => false,
		'rate_limit_tier' => false,
		'created_at' => false,
		'id' => false,
		'smtp_server' => false,
		'smtp_port' => false,
		'root_part_of_domain' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dns_setup' => 'dns_setup',
        'domain' => 'domain',
        'records_status' => 'recordsStatus',
        'status' => 'status',
        'rate_limit_tier' => 'rateLimitTier',
        'created_at' => 'createdAt',
        'id' => 'id',
        'smtp_server' => 'smtp_server',
        'smtp_port' => 'smtp_port',
        'root_part_of_domain' => 'rootPartOfDomain'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dns_setup' => 'setDnsSetup',
        'domain' => 'setDomain',
        'records_status' => 'setRecordsStatus',
        'status' => 'setStatus',
        'rate_limit_tier' => 'setRateLimitTier',
        'created_at' => 'setCreatedAt',
        'id' => 'setId',
        'smtp_server' => 'setSmtpServer',
        'smtp_port' => 'setSmtpPort',
        'root_part_of_domain' => 'setRootPartOfDomain'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dns_setup' => 'getDnsSetup',
        'domain' => 'getDomain',
        'records_status' => 'getRecordsStatus',
        'status' => 'getStatus',
        'rate_limit_tier' => 'getRateLimitTier',
        'created_at' => 'getCreatedAt',
        'id' => 'getId',
        'smtp_server' => 'getSmtpServer',
        'smtp_port' => 'getSmtpPort',
        'root_part_of_domain' => 'getRootPartOfDomain'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('dns_setup', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('records_status', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('rate_limit_tier', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('smtp_server', $data ?? [], null);
        $this->setIfExists('smtp_port', $data ?? [], null);
        $this->setIfExists('root_part_of_domain', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dns_setup
     *
     * @return \OpenAPI\Client\Model\CheckDNSResponseDnsSetup|null
     */
    public function getDnsSetup()
    {
        return $this->container['dns_setup'];
    }

    /**
     * Sets dns_setup
     *
     * @param \OpenAPI\Client\Model\CheckDNSResponseDnsSetup|null $dns_setup dns_setup
     *
     * @return self
     */
    public function setDnsSetup($dns_setup)
    {
        if (is_null($dns_setup)) {
            throw new \InvalidArgumentException('non-nullable dns_setup cannot be null');
        }
        $this->container['dns_setup'] = $dns_setup;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets records_status
     *
     * @return string|null
     */
    public function getRecordsStatus()
    {
        return $this->container['records_status'];
    }

    /**
     * Sets records_status
     *
     * @param string|null $records_status records_status
     *
     * @return self
     */
    public function setRecordsStatus($records_status)
    {
        if (is_null($records_status)) {
            throw new \InvalidArgumentException('non-nullable records_status cannot be null');
        }
        $this->container['records_status'] = $records_status;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets rate_limit_tier
     *
     * @return \OpenAPI\Client\Model\MailServerResponseRateLimitTier|null
     */
    public function getRateLimitTier()
    {
        return $this->container['rate_limit_tier'];
    }

    /**
     * Sets rate_limit_tier
     *
     * @param \OpenAPI\Client\Model\MailServerResponseRateLimitTier|null $rate_limit_tier rate_limit_tier
     *
     * @return self
     */
    public function setRateLimitTier($rate_limit_tier)
    {
        if (is_null($rate_limit_tier)) {
            throw new \InvalidArgumentException('non-nullable rate_limit_tier cannot be null');
        }
        $this->container['rate_limit_tier'] = $rate_limit_tier;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets smtp_server
     *
     * @return string|null
     */
    public function getSmtpServer()
    {
        return $this->container['smtp_server'];
    }

    /**
     * Sets smtp_server
     *
     * @param string|null $smtp_server smtp_server
     *
     * @return self
     */
    public function setSmtpServer($smtp_server)
    {
        if (is_null($smtp_server)) {
            throw new \InvalidArgumentException('non-nullable smtp_server cannot be null');
        }
        $this->container['smtp_server'] = $smtp_server;

        return $this;
    }

    /**
     * Gets smtp_port
     *
     * @return float|null
     */
    public function getSmtpPort()
    {
        return $this->container['smtp_port'];
    }

    /**
     * Sets smtp_port
     *
     * @param float|null $smtp_port smtp_port
     *
     * @return self
     */
    public function setSmtpPort($smtp_port)
    {
        if (is_null($smtp_port)) {
            throw new \InvalidArgumentException('non-nullable smtp_port cannot be null');
        }
        $this->container['smtp_port'] = $smtp_port;

        return $this;
    }

    /**
     * Gets root_part_of_domain
     *
     * @return string|null
     */
    public function getRootPartOfDomain()
    {
        return $this->container['root_part_of_domain'];
    }

    /**
     * Sets root_part_of_domain
     *
     * @param string|null $root_part_of_domain root_part_of_domain
     *
     * @return self
     */
    public function setRootPartOfDomain($root_part_of_domain)
    {
        if (is_null($root_part_of_domain)) {
            throw new \InvalidArgumentException('non-nullable root_part_of_domain cannot be null');
        }
        $this->container['root_part_of_domain'] = $root_part_of_domain;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


