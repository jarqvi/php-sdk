<?php
/**
 * MessagesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Liara Mail API Documentaion
 *
 * A fully featured mail delivery platform for incoming & outgoing e-mail
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@liara.ir
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * MessagesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MessagesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'generateTemporary' => [
            'application/json',
        ],
        'getAllMails' => [
            'application/json',
        ],
        'getSingleMail' => [
            'application/json',
        ],
        'getSingleMailHtml' => [
            'application/json',
        ],
        'sendMail' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation generateTemporary
     *
     * generate temporary access to email html
     *
     * @param  string $mail_server_id mail_server_id (required)
     * @param  string $message_id message_id (required)
     * @param  float $expiration Specifying hourly expiration schedule options (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateTemporary'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TmpAccess
     */
    public function generateTemporary($mail_server_id, $message_id, $expiration = 1, string $contentType = self::contentTypes['generateTemporary'][0])
    {
        list($response) = $this->generateTemporaryWithHttpInfo($mail_server_id, $message_id, $expiration, $contentType);
        return $response;
    }

    /**
     * Operation generateTemporaryWithHttpInfo
     *
     * generate temporary access to email html
     *
     * @param  string $mail_server_id (required)
     * @param  string $message_id (required)
     * @param  float $expiration Specifying hourly expiration schedule options (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateTemporary'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TmpAccess, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateTemporaryWithHttpInfo($mail_server_id, $message_id, $expiration = 1, string $contentType = self::contentTypes['generateTemporary'][0])
    {
        $request = $this->generateTemporaryRequest($mail_server_id, $message_id, $expiration, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\TmpAccess' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TmpAccess' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TmpAccess', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TmpAccess';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TmpAccess',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generateTemporaryAsync
     *
     * generate temporary access to email html
     *
     * @param  string $mail_server_id (required)
     * @param  string $message_id (required)
     * @param  float $expiration Specifying hourly expiration schedule options (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateTemporary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateTemporaryAsync($mail_server_id, $message_id, $expiration = 1, string $contentType = self::contentTypes['generateTemporary'][0])
    {
        return $this->generateTemporaryAsyncWithHttpInfo($mail_server_id, $message_id, $expiration, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateTemporaryAsyncWithHttpInfo
     *
     * generate temporary access to email html
     *
     * @param  string $mail_server_id (required)
     * @param  string $message_id (required)
     * @param  float $expiration Specifying hourly expiration schedule options (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateTemporary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateTemporaryAsyncWithHttpInfo($mail_server_id, $message_id, $expiration = 1, string $contentType = self::contentTypes['generateTemporary'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TmpAccess';
        $request = $this->generateTemporaryRequest($mail_server_id, $message_id, $expiration, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateTemporary'
     *
     * @param  string $mail_server_id (required)
     * @param  string $message_id (required)
     * @param  float $expiration Specifying hourly expiration schedule options (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateTemporary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function generateTemporaryRequest($mail_server_id, $message_id, $expiration = 1, string $contentType = self::contentTypes['generateTemporary'][0])
    {

        // verify the required parameter 'mail_server_id' is set
        if ($mail_server_id === null || (is_array($mail_server_id) && count($mail_server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mail_server_id when calling generateTemporary'
            );
        }
        if (!preg_match("/^[0-9a-fA-F]{24}$/", $mail_server_id)) {
            throw new \InvalidArgumentException("invalid value for \"mail_server_id\" when calling MessagesApi.generateTemporary, must conform to the pattern /^[0-9a-fA-F]{24}$/.");
        }
        
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling generateTemporary'
            );
        }
        if (!preg_match("/^[0-9a-fA-F]{24}$/", $message_id)) {
            throw new \InvalidArgumentException("invalid value for \"message_id\" when calling MessagesApi.generateTemporary, must conform to the pattern /^[0-9a-fA-F]{24}$/.");
        }
        
        if ($expiration !== null && $expiration > 168) {
            throw new \InvalidArgumentException('invalid value for "$expiration" when calling MessagesApi.generateTemporary, must be smaller than or equal to 168.');
        }
        if ($expiration !== null && $expiration < 1) {
            throw new \InvalidArgumentException('invalid value for "$expiration" when calling MessagesApi.generateTemporary, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/api/v1/mails/{mailServerID}/messages/{messageID}/temporary-access';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expiration,
            'expiration', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($mail_server_id !== null) {
            $resourcePath = str_replace(
                '{' . 'mailServerID' . '}',
                ObjectSerializer::toPathValue($mail_server_id),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'messageID' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllMails
     *
     * get all mails
     *
     * @param  string $mail_server_id mail_server_id (required)
     * @param  string $direction direction (required)
     * @param  float $page page (optional, default to 1)
     * @param  float $count count (optional, default to 15)
     * @param  string $state state (optional)
     * @param  string $subject subject (optional)
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllMails'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MailMessages
     */
    public function getAllMails($mail_server_id, $direction, $page = 1, $count = 15, $state = null, $subject = null, $from = null, $to = null, string $contentType = self::contentTypes['getAllMails'][0])
    {
        list($response) = $this->getAllMailsWithHttpInfo($mail_server_id, $direction, $page, $count, $state, $subject, $from, $to, $contentType);
        return $response;
    }

    /**
     * Operation getAllMailsWithHttpInfo
     *
     * get all mails
     *
     * @param  string $mail_server_id (required)
     * @param  string $direction (required)
     * @param  float $page (optional, default to 1)
     * @param  float $count (optional, default to 15)
     * @param  string $state (optional)
     * @param  string $subject (optional)
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllMails'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MailMessages, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllMailsWithHttpInfo($mail_server_id, $direction, $page = 1, $count = 15, $state = null, $subject = null, $from = null, $to = null, string $contentType = self::contentTypes['getAllMails'][0])
    {
        $request = $this->getAllMailsRequest($mail_server_id, $direction, $page, $count, $state, $subject, $from, $to, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MailMessages' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MailMessages' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MailMessages', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MailMessages';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MailMessages',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllMailsAsync
     *
     * get all mails
     *
     * @param  string $mail_server_id (required)
     * @param  string $direction (required)
     * @param  float $page (optional, default to 1)
     * @param  float $count (optional, default to 15)
     * @param  string $state (optional)
     * @param  string $subject (optional)
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllMails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllMailsAsync($mail_server_id, $direction, $page = 1, $count = 15, $state = null, $subject = null, $from = null, $to = null, string $contentType = self::contentTypes['getAllMails'][0])
    {
        return $this->getAllMailsAsyncWithHttpInfo($mail_server_id, $direction, $page, $count, $state, $subject, $from, $to, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllMailsAsyncWithHttpInfo
     *
     * get all mails
     *
     * @param  string $mail_server_id (required)
     * @param  string $direction (required)
     * @param  float $page (optional, default to 1)
     * @param  float $count (optional, default to 15)
     * @param  string $state (optional)
     * @param  string $subject (optional)
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllMails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllMailsAsyncWithHttpInfo($mail_server_id, $direction, $page = 1, $count = 15, $state = null, $subject = null, $from = null, $to = null, string $contentType = self::contentTypes['getAllMails'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MailMessages';
        $request = $this->getAllMailsRequest($mail_server_id, $direction, $page, $count, $state, $subject, $from, $to, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllMails'
     *
     * @param  string $mail_server_id (required)
     * @param  string $direction (required)
     * @param  float $page (optional, default to 1)
     * @param  float $count (optional, default to 15)
     * @param  string $state (optional)
     * @param  string $subject (optional)
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllMails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllMailsRequest($mail_server_id, $direction, $page = 1, $count = 15, $state = null, $subject = null, $from = null, $to = null, string $contentType = self::contentTypes['getAllMails'][0])
    {

        // verify the required parameter 'mail_server_id' is set
        if ($mail_server_id === null || (is_array($mail_server_id) && count($mail_server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mail_server_id when calling getAllMails'
            );
        }
        if (!preg_match("/^[0-9a-fA-F]{24}$/", $mail_server_id)) {
            throw new \InvalidArgumentException("invalid value for \"mail_server_id\" when calling MessagesApi.getAllMails, must conform to the pattern /^[0-9a-fA-F]{24}$/.");
        }
        
        // verify the required parameter 'direction' is set
        if ($direction === null || (is_array($direction) && count($direction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $direction when calling getAllMails'
            );
        }


        if ($count !== null && $count > 100) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling MessagesApi.getAllMails, must be smaller than or equal to 100.');
        }
        





        $resourcePath = '/api/v1/mails/{mailServerID}/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $direction,
            'direction', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $subject,
            'subject', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($mail_server_id !== null) {
            $resourcePath = str_replace(
                '{' . 'mailServerID' . '}',
                ObjectSerializer::toPathValue($mail_server_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSingleMail
     *
     * get single mail
     *
     * @param  string $mail_server_id mail_server_id (required)
     * @param  string $message_id message_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSingleMail'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetSingleMail200Response
     */
    public function getSingleMail($mail_server_id, $message_id, string $contentType = self::contentTypes['getSingleMail'][0])
    {
        list($response) = $this->getSingleMailWithHttpInfo($mail_server_id, $message_id, $contentType);
        return $response;
    }

    /**
     * Operation getSingleMailWithHttpInfo
     *
     * get single mail
     *
     * @param  string $mail_server_id (required)
     * @param  string $message_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSingleMail'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetSingleMail200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSingleMailWithHttpInfo($mail_server_id, $message_id, string $contentType = self::contentTypes['getSingleMail'][0])
    {
        $request = $this->getSingleMailRequest($mail_server_id, $message_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetSingleMail200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetSingleMail200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetSingleMail200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetSingleMail200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetSingleMail200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSingleMailAsync
     *
     * get single mail
     *
     * @param  string $mail_server_id (required)
     * @param  string $message_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSingleMail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSingleMailAsync($mail_server_id, $message_id, string $contentType = self::contentTypes['getSingleMail'][0])
    {
        return $this->getSingleMailAsyncWithHttpInfo($mail_server_id, $message_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSingleMailAsyncWithHttpInfo
     *
     * get single mail
     *
     * @param  string $mail_server_id (required)
     * @param  string $message_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSingleMail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSingleMailAsyncWithHttpInfo($mail_server_id, $message_id, string $contentType = self::contentTypes['getSingleMail'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetSingleMail200Response';
        $request = $this->getSingleMailRequest($mail_server_id, $message_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSingleMail'
     *
     * @param  string $mail_server_id (required)
     * @param  string $message_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSingleMail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSingleMailRequest($mail_server_id, $message_id, string $contentType = self::contentTypes['getSingleMail'][0])
    {

        // verify the required parameter 'mail_server_id' is set
        if ($mail_server_id === null || (is_array($mail_server_id) && count($mail_server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mail_server_id when calling getSingleMail'
            );
        }
        if (!preg_match("/^[0-9a-fA-F]{24}$/", $mail_server_id)) {
            throw new \InvalidArgumentException("invalid value for \"mail_server_id\" when calling MessagesApi.getSingleMail, must conform to the pattern /^[0-9a-fA-F]{24}$/.");
        }
        
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling getSingleMail'
            );
        }
        if (!preg_match("/^[0-9a-fA-F]{24}$/", $message_id)) {
            throw new \InvalidArgumentException("invalid value for \"message_id\" when calling MessagesApi.getSingleMail, must conform to the pattern /^[0-9a-fA-F]{24}$/.");
        }
        

        $resourcePath = '/api/v1/mails/{mailServerID}/messages/{messageID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($mail_server_id !== null) {
            $resourcePath = str_replace(
                '{' . 'mailServerID' . '}',
                ObjectSerializer::toPathValue($mail_server_id),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'messageID' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSingleMailHtml
     *
     * get single mail html
     *
     * @param  string $mail_server_id mail_server_id (required)
     * @param  string $message_id message_id (required)
     * @param  string $token token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSingleMailHtml'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getSingleMailHtml($mail_server_id, $message_id, $token, string $contentType = self::contentTypes['getSingleMailHtml'][0])
    {
        $this->getSingleMailHtmlWithHttpInfo($mail_server_id, $message_id, $token, $contentType);
    }

    /**
     * Operation getSingleMailHtmlWithHttpInfo
     *
     * get single mail html
     *
     * @param  string $mail_server_id (required)
     * @param  string $message_id (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSingleMailHtml'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSingleMailHtmlWithHttpInfo($mail_server_id, $message_id, $token, string $contentType = self::contentTypes['getSingleMailHtml'][0])
    {
        $request = $this->getSingleMailHtmlRequest($mail_server_id, $message_id, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getSingleMailHtmlAsync
     *
     * get single mail html
     *
     * @param  string $mail_server_id (required)
     * @param  string $message_id (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSingleMailHtml'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSingleMailHtmlAsync($mail_server_id, $message_id, $token, string $contentType = self::contentTypes['getSingleMailHtml'][0])
    {
        return $this->getSingleMailHtmlAsyncWithHttpInfo($mail_server_id, $message_id, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSingleMailHtmlAsyncWithHttpInfo
     *
     * get single mail html
     *
     * @param  string $mail_server_id (required)
     * @param  string $message_id (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSingleMailHtml'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSingleMailHtmlAsyncWithHttpInfo($mail_server_id, $message_id, $token, string $contentType = self::contentTypes['getSingleMailHtml'][0])
    {
        $returnType = '';
        $request = $this->getSingleMailHtmlRequest($mail_server_id, $message_id, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSingleMailHtml'
     *
     * @param  string $mail_server_id (required)
     * @param  string $message_id (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSingleMailHtml'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSingleMailHtmlRequest($mail_server_id, $message_id, $token, string $contentType = self::contentTypes['getSingleMailHtml'][0])
    {

        // verify the required parameter 'mail_server_id' is set
        if ($mail_server_id === null || (is_array($mail_server_id) && count($mail_server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mail_server_id when calling getSingleMailHtml'
            );
        }
        if (!preg_match("/^[0-9a-fA-F]{24}$/", $mail_server_id)) {
            throw new \InvalidArgumentException("invalid value for \"mail_server_id\" when calling MessagesApi.getSingleMailHtml, must conform to the pattern /^[0-9a-fA-F]{24}$/.");
        }
        
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling getSingleMailHtml'
            );
        }
        if (!preg_match("/^[0-9a-fA-F]{24}$/", $message_id)) {
            throw new \InvalidArgumentException("invalid value for \"message_id\" when calling MessagesApi.getSingleMailHtml, must conform to the pattern /^[0-9a-fA-F]{24}$/.");
        }
        
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getSingleMailHtml'
            );
        }


        $resourcePath = '/api/v1/mails/{mailServerID}/messages/{messageID}/render';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($mail_server_id !== null) {
            $resourcePath = str_replace(
                '{' . 'mailServerID' . '}',
                ObjectSerializer::toPathValue($mail_server_id),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'messageID' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/html', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendMail
     *
     * send a mail
     *
     * @param  string $mail_server_id mail_server_id (required)
     * @param  \OpenAPI\Client\Model\Model3 $body body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendMail'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PostMails201Response
     */
    public function sendMail($mail_server_id, $body = null, string $contentType = self::contentTypes['sendMail'][0])
    {
        list($response) = $this->sendMailWithHttpInfo($mail_server_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation sendMailWithHttpInfo
     *
     * send a mail
     *
     * @param  string $mail_server_id (required)
     * @param  \OpenAPI\Client\Model\Model3 $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendMail'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PostMails201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendMailWithHttpInfo($mail_server_id, $body = null, string $contentType = self::contentTypes['sendMail'][0])
    {
        $request = $this->sendMailRequest($mail_server_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\PostMails201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PostMails201Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PostMails201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PostMails201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PostMails201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendMailAsync
     *
     * send a mail
     *
     * @param  string $mail_server_id (required)
     * @param  \OpenAPI\Client\Model\Model3 $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendMail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendMailAsync($mail_server_id, $body = null, string $contentType = self::contentTypes['sendMail'][0])
    {
        return $this->sendMailAsyncWithHttpInfo($mail_server_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendMailAsyncWithHttpInfo
     *
     * send a mail
     *
     * @param  string $mail_server_id (required)
     * @param  \OpenAPI\Client\Model\Model3 $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendMail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendMailAsyncWithHttpInfo($mail_server_id, $body = null, string $contentType = self::contentTypes['sendMail'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PostMails201Response';
        $request = $this->sendMailRequest($mail_server_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendMail'
     *
     * @param  string $mail_server_id (required)
     * @param  \OpenAPI\Client\Model\Model3 $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendMail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendMailRequest($mail_server_id, $body = null, string $contentType = self::contentTypes['sendMail'][0])
    {

        // verify the required parameter 'mail_server_id' is set
        if ($mail_server_id === null || (is_array($mail_server_id) && count($mail_server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mail_server_id when calling sendMail'
            );
        }
        if (!preg_match("/^[0-9a-fA-F]{24}$/", $mail_server_id)) {
            throw new \InvalidArgumentException("invalid value for \"mail_server_id\" when calling MessagesApi.sendMail, must conform to the pattern /^[0-9a-fA-F]{24}$/.");
        }
        


        $resourcePath = '/api/v1/mails/{mailServerID}/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($mail_server_id !== null) {
            $resourcePath = str_replace(
                '{' . 'mailServerID' . '}',
                ObjectSerializer::toPathValue($mail_server_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
