<?php
/**
 * CheckDomainDomain
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PaaS
 *
 * Manage your apps using our API  [wss://api.iran.liara.ir?token=<api-token>&cmd=/bin/bash&project_id=<project-id>]( wss://api.iran.liara.ir?token=<api-token>&cmd=/bin/bash&project_id=<project-id>)  Parameters: - `token`: Your api token in liara - `cmd`: By default /bin/bash - `project_id`: The id of your project in liara  This `WebSocket` endpoint allows `real-time` communication with the projects service hosted at `Liara` You can use `WebSocket protocols` to send and receive data, enabling efficient and low-latency interactions with the projects
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@liara.ir
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CheckDomainDomain Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CheckDomainDomain implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CheckDomain_domain';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_id' => 'string',
        'user' => 'string',
        'name' => 'string',
        'type' => 'string',
        'project' => '\OpenAPI\Client\Model\CheckDomainDomainProject',
        'status' => 'string',
        'certificates_status' => 'string',
        'redirect_to' => 'string',
        'redirect_status' => 'float',
        'updated_at' => 'string',
        'punycode_name' => 'string',
        'verification_code' => 'string',
        'created_at' => 'string',
        '__v' => 'float',
        'c_name_record' => 'string',
        'issued_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        '_id' => null,
        'user' => null,
        'name' => null,
        'type' => null,
        'project' => null,
        'status' => null,
        'certificates_status' => null,
        'redirect_to' => null,
        'redirect_status' => null,
        'updated_at' => null,
        'punycode_name' => null,
        'verification_code' => null,
        'created_at' => null,
        '__v' => null,
        'c_name_record' => null,
        'issued_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        '_id' => false,
		'user' => false,
		'name' => false,
		'type' => false,
		'project' => false,
		'status' => false,
		'certificates_status' => false,
		'redirect_to' => false,
		'redirect_status' => false,
		'updated_at' => false,
		'punycode_name' => false,
		'verification_code' => false,
		'created_at' => false,
		'__v' => false,
		'c_name_record' => false,
		'issued_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'user' => 'user',
        'name' => 'name',
        'type' => 'type',
        'project' => 'project',
        'status' => 'status',
        'certificates_status' => 'certificatesStatus',
        'redirect_to' => 'redirectTo',
        'redirect_status' => 'redirectStatus',
        'updated_at' => 'updated_at',
        'punycode_name' => 'punycodeName',
        'verification_code' => 'verificationCode',
        'created_at' => 'created_at',
        '__v' => '__v',
        'c_name_record' => 'CNameRecord',
        'issued_at' => 'issuedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'user' => 'setUser',
        'name' => 'setName',
        'type' => 'setType',
        'project' => 'setProject',
        'status' => 'setStatus',
        'certificates_status' => 'setCertificatesStatus',
        'redirect_to' => 'setRedirectTo',
        'redirect_status' => 'setRedirectStatus',
        'updated_at' => 'setUpdatedAt',
        'punycode_name' => 'setPunycodeName',
        'verification_code' => 'setVerificationCode',
        'created_at' => 'setCreatedAt',
        '__v' => 'setV',
        'c_name_record' => 'setCNameRecord',
        'issued_at' => 'setIssuedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'user' => 'getUser',
        'name' => 'getName',
        'type' => 'getType',
        'project' => 'getProject',
        'status' => 'getStatus',
        'certificates_status' => 'getCertificatesStatus',
        'redirect_to' => 'getRedirectTo',
        'redirect_status' => 'getRedirectStatus',
        'updated_at' => 'getUpdatedAt',
        'punycode_name' => 'getPunycodeName',
        'verification_code' => 'getVerificationCode',
        'created_at' => 'getCreatedAt',
        '__v' => 'getV',
        'c_name_record' => 'getCNameRecord',
        'issued_at' => 'getIssuedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('_id', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('project', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('certificates_status', $data ?? [], null);
        $this->setIfExists('redirect_to', $data ?? [], null);
        $this->setIfExists('redirect_status', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('punycode_name', $data ?? [], null);
        $this->setIfExists('verification_code', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('__v', $data ?? [], null);
        $this->setIfExists('c_name_record', $data ?? [], null);
        $this->setIfExists('issued_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param string|null $_id _id
     *
     * @return self
     */
    public function setId($_id)
    {
        if (is_null($_id)) {
            throw new \InvalidArgumentException('non-nullable _id cannot be null');
        }
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \OpenAPI\Client\Model\CheckDomainDomainProject|null
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \OpenAPI\Client\Model\CheckDomainDomainProject|null $project project
     *
     * @return self
     */
    public function setProject($project)
    {
        if (is_null($project)) {
            throw new \InvalidArgumentException('non-nullable project cannot be null');
        }
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets certificates_status
     *
     * @return string|null
     */
    public function getCertificatesStatus()
    {
        return $this->container['certificates_status'];
    }

    /**
     * Sets certificates_status
     *
     * @param string|null $certificates_status certificates_status
     *
     * @return self
     */
    public function setCertificatesStatus($certificates_status)
    {
        if (is_null($certificates_status)) {
            throw new \InvalidArgumentException('non-nullable certificates_status cannot be null');
        }
        $this->container['certificates_status'] = $certificates_status;

        return $this;
    }

    /**
     * Gets redirect_to
     *
     * @return string|null
     */
    public function getRedirectTo()
    {
        return $this->container['redirect_to'];
    }

    /**
     * Sets redirect_to
     *
     * @param string|null $redirect_to redirect_to
     *
     * @return self
     */
    public function setRedirectTo($redirect_to)
    {
        if (is_null($redirect_to)) {
            throw new \InvalidArgumentException('non-nullable redirect_to cannot be null');
        }
        $this->container['redirect_to'] = $redirect_to;

        return $this;
    }

    /**
     * Gets redirect_status
     *
     * @return float|null
     */
    public function getRedirectStatus()
    {
        return $this->container['redirect_status'];
    }

    /**
     * Sets redirect_status
     *
     * @param float|null $redirect_status redirect_status
     *
     * @return self
     */
    public function setRedirectStatus($redirect_status)
    {
        if (is_null($redirect_status)) {
            throw new \InvalidArgumentException('non-nullable redirect_status cannot be null');
        }
        $this->container['redirect_status'] = $redirect_status;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets punycode_name
     *
     * @return string|null
     */
    public function getPunycodeName()
    {
        return $this->container['punycode_name'];
    }

    /**
     * Sets punycode_name
     *
     * @param string|null $punycode_name punycode_name
     *
     * @return self
     */
    public function setPunycodeName($punycode_name)
    {
        if (is_null($punycode_name)) {
            throw new \InvalidArgumentException('non-nullable punycode_name cannot be null');
        }
        $this->container['punycode_name'] = $punycode_name;

        return $this;
    }

    /**
     * Gets verification_code
     *
     * @return string|null
     */
    public function getVerificationCode()
    {
        return $this->container['verification_code'];
    }

    /**
     * Sets verification_code
     *
     * @param string|null $verification_code verification_code
     *
     * @return self
     */
    public function setVerificationCode($verification_code)
    {
        if (is_null($verification_code)) {
            throw new \InvalidArgumentException('non-nullable verification_code cannot be null');
        }
        $this->container['verification_code'] = $verification_code;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets __v
     *
     * @return float|null
     */
    public function getV()
    {
        return $this->container['__v'];
    }

    /**
     * Sets __v
     *
     * @param float|null $__v __v
     *
     * @return self
     */
    public function setV($__v)
    {
        if (is_null($__v)) {
            throw new \InvalidArgumentException('non-nullable __v cannot be null');
        }
        $this->container['__v'] = $__v;

        return $this;
    }

    /**
     * Gets c_name_record
     *
     * @return string|null
     */
    public function getCNameRecord()
    {
        return $this->container['c_name_record'];
    }

    /**
     * Sets c_name_record
     *
     * @param string|null $c_name_record c_name_record
     *
     * @return self
     */
    public function setCNameRecord($c_name_record)
    {
        if (is_null($c_name_record)) {
            throw new \InvalidArgumentException('non-nullable c_name_record cannot be null');
        }
        $this->container['c_name_record'] = $c_name_record;

        return $this;
    }

    /**
     * Gets issued_at
     *
     * @return string|null
     */
    public function getIssuedAt()
    {
        return $this->container['issued_at'];
    }

    /**
     * Sets issued_at
     *
     * @param string|null $issued_at issued_at
     *
     * @return self
     */
    public function setIssuedAt($issued_at)
    {
        if (is_null($issued_at)) {
            throw new \InvalidArgumentException('non-nullable issued_at cannot be null');
        }
        $this->container['issued_at'] = $issued_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


