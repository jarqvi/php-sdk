<?php
/**
 * ProjectAllDetailsProject
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PaaS
 *
 * Manage your apps using our API  [wss://api.iran.liara.ir?token=<api-token>&cmd=/bin/bash&project_id=<project-id>]( wss://api.iran.liara.ir?token=<api-token>&cmd=/bin/bash&project_id=<project-id>)  Parameters: - `token`: Your api token in liara - `cmd`: By default /bin/bash - `project_id`: The id of your project in liara  This `WebSocket` endpoint allows `real-time` communication with the projects service hosted at `Liara` You can use `WebSocket protocols` to send and receive data, enabling efficient and low-latency interactions with the projects
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@liara.ir
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProjectAllDetailsProject Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProjectAllDetailsProject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProjectAllDetails_project';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_id' => 'string',
        'project_id' => 'string',
        'type' => 'string',
        'status' => 'string',
        'default_subdomain' => 'bool',
        'zero_downtime' => 'bool',
        'scale' => 'float',
        'envs' => '\OpenAPI\Client\Model\ProjectAllDetailsProjectEnvsInner[]',
        'plan_id' => 'string',
        'fixed_ip_status' => 'string',
        'created_at' => 'string',
        'node' => '\OpenAPI\Client\Model\ProjectAllDetailsProjectNode',
        'hourly_price' => 'float',
        'is_deployed' => 'bool',
        'reserved_disk_space' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        '_id' => null,
        'project_id' => null,
        'type' => null,
        'status' => null,
        'default_subdomain' => null,
        'zero_downtime' => null,
        'scale' => null,
        'envs' => null,
        'plan_id' => null,
        'fixed_ip_status' => null,
        'created_at' => null,
        'node' => null,
        'hourly_price' => null,
        'is_deployed' => null,
        'reserved_disk_space' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        '_id' => false,
		'project_id' => false,
		'type' => false,
		'status' => false,
		'default_subdomain' => false,
		'zero_downtime' => false,
		'scale' => false,
		'envs' => false,
		'plan_id' => false,
		'fixed_ip_status' => false,
		'created_at' => false,
		'node' => false,
		'hourly_price' => false,
		'is_deployed' => false,
		'reserved_disk_space' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'project_id' => 'project_id',
        'type' => 'type',
        'status' => 'status',
        'default_subdomain' => 'defaultSubdomain',
        'zero_downtime' => 'zeroDowntime',
        'scale' => 'scale',
        'envs' => 'envs',
        'plan_id' => 'planID',
        'fixed_ip_status' => 'fixedIPStatus',
        'created_at' => 'created_at',
        'node' => 'node',
        'hourly_price' => 'hourlyPrice',
        'is_deployed' => 'isDeployed',
        'reserved_disk_space' => 'reservedDiskSpace'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'project_id' => 'setProjectId',
        'type' => 'setType',
        'status' => 'setStatus',
        'default_subdomain' => 'setDefaultSubdomain',
        'zero_downtime' => 'setZeroDowntime',
        'scale' => 'setScale',
        'envs' => 'setEnvs',
        'plan_id' => 'setPlanId',
        'fixed_ip_status' => 'setFixedIpStatus',
        'created_at' => 'setCreatedAt',
        'node' => 'setNode',
        'hourly_price' => 'setHourlyPrice',
        'is_deployed' => 'setIsDeployed',
        'reserved_disk_space' => 'setReservedDiskSpace'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'project_id' => 'getProjectId',
        'type' => 'getType',
        'status' => 'getStatus',
        'default_subdomain' => 'getDefaultSubdomain',
        'zero_downtime' => 'getZeroDowntime',
        'scale' => 'getScale',
        'envs' => 'getEnvs',
        'plan_id' => 'getPlanId',
        'fixed_ip_status' => 'getFixedIpStatus',
        'created_at' => 'getCreatedAt',
        'node' => 'getNode',
        'hourly_price' => 'getHourlyPrice',
        'is_deployed' => 'getIsDeployed',
        'reserved_disk_space' => 'getReservedDiskSpace'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('_id', $data ?? [], null);
        $this->setIfExists('project_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('default_subdomain', $data ?? [], null);
        $this->setIfExists('zero_downtime', $data ?? [], null);
        $this->setIfExists('scale', $data ?? [], null);
        $this->setIfExists('envs', $data ?? [], null);
        $this->setIfExists('plan_id', $data ?? [], null);
        $this->setIfExists('fixed_ip_status', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('node', $data ?? [], null);
        $this->setIfExists('hourly_price', $data ?? [], null);
        $this->setIfExists('is_deployed', $data ?? [], null);
        $this->setIfExists('reserved_disk_space', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param string|null $_id The id of project
     *
     * @return self
     */
    public function setId($_id)
    {
        if (is_null($_id)) {
            throw new \InvalidArgumentException('non-nullable _id cannot be null');
        }
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string|null
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string|null $project_id The name of project
     *
     * @return self
     */
    public function setProjectId($project_id)
    {
        if (is_null($project_id)) {
            throw new \InvalidArgumentException('non-nullable project_id cannot be null');
        }
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The platform of project
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The status of project
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets default_subdomain
     *
     * @return bool|null
     */
    public function getDefaultSubdomain()
    {
        return $this->container['default_subdomain'];
    }

    /**
     * Sets default_subdomain
     *
     * @param bool|null $default_subdomain The defaultSubdomain status of project
     *
     * @return self
     */
    public function setDefaultSubdomain($default_subdomain)
    {
        if (is_null($default_subdomain)) {
            throw new \InvalidArgumentException('non-nullable default_subdomain cannot be null');
        }
        $this->container['default_subdomain'] = $default_subdomain;

        return $this;
    }

    /**
     * Gets zero_downtime
     *
     * @return bool|null
     */
    public function getZeroDowntime()
    {
        return $this->container['zero_downtime'];
    }

    /**
     * Sets zero_downtime
     *
     * @param bool|null $zero_downtime The zeroDowntime status of project
     *
     * @return self
     */
    public function setZeroDowntime($zero_downtime)
    {
        if (is_null($zero_downtime)) {
            throw new \InvalidArgumentException('non-nullable zero_downtime cannot be null');
        }
        $this->container['zero_downtime'] = $zero_downtime;

        return $this;
    }

    /**
     * Gets scale
     *
     * @return float|null
     */
    public function getScale()
    {
        return $this->container['scale'];
    }

    /**
     * Sets scale
     *
     * @param float|null $scale The being on of project
     *
     * @return self
     */
    public function setScale($scale)
    {
        if (is_null($scale)) {
            throw new \InvalidArgumentException('non-nullable scale cannot be null');
        }
        $this->container['scale'] = $scale;

        return $this;
    }

    /**
     * Gets envs
     *
     * @return \OpenAPI\Client\Model\ProjectAllDetailsProjectEnvsInner[]|null
     */
    public function getEnvs()
    {
        return $this->container['envs'];
    }

    /**
     * Sets envs
     *
     * @param \OpenAPI\Client\Model\ProjectAllDetailsProjectEnvsInner[]|null $envs The envs of project
     *
     * @return self
     */
    public function setEnvs($envs)
    {
        if (is_null($envs)) {
            throw new \InvalidArgumentException('non-nullable envs cannot be null');
        }
        $this->container['envs'] = $envs;

        return $this;
    }

    /**
     * Gets plan_id
     *
     * @return string|null
     */
    public function getPlanId()
    {
        return $this->container['plan_id'];
    }

    /**
     * Sets plan_id
     *
     * @param string|null $plan_id The plan of project
     *
     * @return self
     */
    public function setPlanId($plan_id)
    {
        if (is_null($plan_id)) {
            throw new \InvalidArgumentException('non-nullable plan_id cannot be null');
        }
        $this->container['plan_id'] = $plan_id;

        return $this;
    }

    /**
     * Gets fixed_ip_status
     *
     * @return string|null
     */
    public function getFixedIpStatus()
    {
        return $this->container['fixed_ip_status'];
    }

    /**
     * Sets fixed_ip_status
     *
     * @param string|null $fixed_ip_status The fixedIPStatus of project
     *
     * @return self
     */
    public function setFixedIpStatus($fixed_ip_status)
    {
        if (is_null($fixed_ip_status)) {
            throw new \InvalidArgumentException('non-nullable fixed_ip_status cannot be null');
        }
        $this->container['fixed_ip_status'] = $fixed_ip_status;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at The time to create of project
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets node
     *
     * @return \OpenAPI\Client\Model\ProjectAllDetailsProjectNode|null
     */
    public function getNode()
    {
        return $this->container['node'];
    }

    /**
     * Sets node
     *
     * @param \OpenAPI\Client\Model\ProjectAllDetailsProjectNode|null $node node
     *
     * @return self
     */
    public function setNode($node)
    {
        if (is_null($node)) {
            throw new \InvalidArgumentException('non-nullable node cannot be null');
        }
        $this->container['node'] = $node;

        return $this;
    }

    /**
     * Gets hourly_price
     *
     * @return float|null
     */
    public function getHourlyPrice()
    {
        return $this->container['hourly_price'];
    }

    /**
     * Sets hourly_price
     *
     * @param float|null $hourly_price The hourlyPrice of project
     *
     * @return self
     */
    public function setHourlyPrice($hourly_price)
    {
        if (is_null($hourly_price)) {
            throw new \InvalidArgumentException('non-nullable hourly_price cannot be null');
        }
        $this->container['hourly_price'] = $hourly_price;

        return $this;
    }

    /**
     * Gets is_deployed
     *
     * @return bool|null
     */
    public function getIsDeployed()
    {
        return $this->container['is_deployed'];
    }

    /**
     * Sets is_deployed
     *
     * @param bool|null $is_deployed The deployment status of project
     *
     * @return self
     */
    public function setIsDeployed($is_deployed)
    {
        if (is_null($is_deployed)) {
            throw new \InvalidArgumentException('non-nullable is_deployed cannot be null');
        }
        $this->container['is_deployed'] = $is_deployed;

        return $this;
    }

    /**
     * Gets reserved_disk_space
     *
     * @return float|null
     */
    public function getReservedDiskSpace()
    {
        return $this->container['reserved_disk_space'];
    }

    /**
     * Sets reserved_disk_space
     *
     * @param float|null $reserved_disk_space The count reservedDiskSpace of project
     *
     * @return self
     */
    public function setReservedDiskSpace($reserved_disk_space)
    {
        if (is_null($reserved_disk_space)) {
            throw new \InvalidArgumentException('non-nullable reserved_disk_space cannot be null');
        }
        $this->container['reserved_disk_space'] = $reserved_disk_space;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


